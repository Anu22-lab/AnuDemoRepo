{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Employeedataset",
						"type": "DatasetReference"
					},
					"name": "Employeedata"
				},
				{
					"dataset": {
						"referenceName": "Departmentdataset",
						"type": "DatasetReference"
					},
					"name": "Departmentdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Outputdataset",
						"type": "DatasetReference"
					},
					"name": "Outputdata"
				}
			],
			"transformations": [
				{
					"name": "EmpdataDeptdata"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter1 as string",
				"}",
				"source(output(",
				"          {emp id} as string,",
				"          Name as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employeedata",
				"source(output(",
				"          {S. No. } as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Departmentdata",
				"Employeedata, Departmentdata join(Employeedata@Department == {S. No. },",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> EmpdataDeptdata",
				"EmpdataDeptdata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['empdatadepdata'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'adfdemo',",
				"     assertFailure_folderPath: 'Output',",
				"     mapColumn(",
				"          {S. No.} = {emp id},",
				"          {Emp Name} = Name,",
				"          Country,",
				"          {Emp Department} = Departmentdata@department,",
				"          {emp id} = {S. No. }",
				"     ),",
				"     partitionBy('hash', 1)) ~> Outputdata"
			]
		}
	}
}
{
	"name": "totalEmpbyDepData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Employeedataset",
						"type": "DatasetReference"
					},
					"name": "Employees"
				},
				{
					"dataset": {
						"referenceName": "Employeedataset",
						"type": "DatasetReference"
					},
					"name": "CountryforEmp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Outputdataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "AggregateOncountry"
				},
				{
					"name": "joinOncountry"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {emp id} as string,",
				"          Name as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employees",
				"source(output(",
				"          {emp id} as string,",
				"          Name as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryforEmp",
				"Employees aggregate(groupBy(Department),",
				"     {emp id} = count(Country)) ~> AggregateOncountry",
				"AggregateOncountry, CountryforEmp join(AggregateOncountry@Department == CountryforEmp@Department,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOncountry",
				"joinOncountry sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['toatalEmpByDepLatest.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}